from random import choice
import numpy as np
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt
from sklearn.metrics import mean_absolute_error
from PIL.ImagePalette import random
from django.http import HttpRequest, HttpResponse
from django.shortcuts import render
from random import random, randint, uniform
import os
import json


def get_table_data(data):
    table_data = json.loads(data)

    x = table_data.split('\n')[0].split(',')[1:]
    y = table_data.split('\n')[1].split(',')[1:]
    x = list(map(float, x))
    y = list(map(float, y))
    return x, y


def clear_data():
    folder = 'static/graphics'
    for filename in os.listdir(folder):
        os.remove(os.path.join(folder, filename))


def get_linear_regression(x, y):
    plt.gcf().clear()
    clear_data()
    x_train = np.array(x).reshape(-1, 1)
    y_train = np.array(y).reshape(-1, 1)

    model = LinearRegression()
    model.fit(x_train, y_train)

    k, b = float(model.coef_[0][0]), float(model.intercept_[0])

    x1 = np.array([-1000] + x + [1000])
    y1 = x1 * k + b
    plt.rc('font', size=13)

    plt.plot(x1, y1, color='red', label='–õ–∏–Ω–∏—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏')
    plt.scatter(x_train, y_train, color='blue', label='–î–∞–Ω–Ω—ã–µ')

    plt.xlim(min(x) - 5, max(x) + 5)
    plt.ylim(min(y) - 5, max(y) + 5)

    plt.xlabel('–í—Ö–æ–¥')
    plt.ylabel('–í—ã—Ö–æ–¥')
    plt.title('–°–∏—Å—Ç–µ–º–∞')
    plt.legend()
    plt.grid(True)
    file = randint(10000, 1000000)
    plt.savefig(f"static/graphics/{file}.jpg")
    plt.savefig("output1", facecolor='y', bbox_inches="tight",
                pad_inches=0.3, transparent=True)

    y_pred = model.predict(x_train)

    mae = mean_absolute_error(y_train, y_pred)

    return k, b, file, mae


def systems(request: HttpRequest):
    # from django.http import HttpResponseRedirect
    # if not request.COOKIES.get('good'):
    #     return HttpResponseRedirect('/sorry')
    return render(request, 'lab/black_box/boxes.html')


def main_work(request: HttpRequest, system):
    # from django.http import HttpResponseRedirect
    # if not request.COOKIES.get('good'):
    #     return HttpResponseRedirect('/sorry')
    if request.method == 'POST':
        temp = request.POST.get('table_data')
        if temp:
            x,y = get_table_data(temp)
            if not x:
                return HttpResponse('no data')
            k, b, file, mae = get_linear_regression(x, y)
            data = {'k': round(k, 2), 'b': round(b, 2), 'file': f'/static/graphics/{file}.jpg', 'mae': round(mae, 2),
                    'x': x, 'y': y}

            return render(request, 'lab/black_box/result.html', context=data)
    kbu = {
        'phone': [-random() * 1.5 - 0.5, random() * 20 + 5, random() * 5 + 1],
        'plant': [random() * 2 + 1, random() * 10 + 5, random() * 3 + 1],
        'seeds': [random() * 2 + 1, random() * 10 + 5, random() * 3 + 1],
        'car': [random() * 10 + 5, random() * 5, random() * 15 + 5],
        'unknown': [choice([-1, 1]) * random() * 10, random() * 50, random() * 30]
    }
    slider = {
        'phone': ['0', '60', '1', '30'],
        'plant': ['0', '100', '1', '50'],
        'seeds': ['0', '100', '1', '50'],
        'car': ['0', '10', '0.1', '5'],
        'unknown': ['-100', '100', '1', '0']
    }
    inout = {
        'phone': ['–≤—Ä–µ–º—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞', '–æ—Å—Ç–∞–≤—à–∏–π—Å—è —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞'],
        'plant': ['–æ–±—ä—ë–º –≤–æ–¥—ã', '–≤—ã—Å–æ—Ç–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è'],
        'seeds': ['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–º—è–Ω', '–≤–µ—Å –∫—É—á–∫–∏'],
        'car': ['—á–∏—Å–ª–æ', '—á–∏—Å–ª–æ'],
        'unknown': ['–∑–Ω–∞—á–µ–Ω–∏–µ', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç']
    }
    text = {'phone': 'üì± –ú–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: –∫–∞–∫ –±—ã—Å—Ç—Ä–æ —Ä–∞–∑—Ä—è–¥–∏—Ç—Å—è –±–∞—Ç–∞—Ä–µ—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞?',
            'plant': 'üå± –†–æ—Å—Ç —Ä–∞—Å—Ç–µ–Ω–∏—è: –∫–∞–∫–æ–π –±—É–¥–µ—Ç –≤—ã—Å–æ—Ç–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª–∏–≤–∞?',
            'seeds': 'üåª –í–µ—Å —Å–µ–º—è–Ω: —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –≤–µ—Å–∏—Ç—å –∫—É—á–∫–∞ —Å–µ–º—è–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–µ–º—è–Ω –≤ –Ω–µ–π?',
            'car': 'üöó –°–∫–æ—Ä–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è: —Å –∫–∞–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é –ø–æ–µ–¥–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏–ª—ã –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –ø–µ–¥–∞–ª—å –∞–∫—Å–µ–ª–µ—Ä–∞—Ü–∏–∏?',
            'unknown': '‚ùì –ù–µ–≤–µ–¥–æ–º–æ–µ: —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–µ–≤–µ–¥–æ–º–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å?'}

    data = {'system': system, 'kbu': [i / 1.2 for i in kbu[system]], 'slider': slider[system], 'inout': inout[system],
            'text': text[system], 'photo': f'/static/img/{system}.jpg', 'action': f'/systems/{system}/'}
    return render(request, f'lab/black_box/black_box.html', context=data)


def random_c():
    a = round(uniform(1, 7), 1)
    b = round(uniform(-20, 20), 1)
    c = round(uniform(-10, 10), 1)

    if abs(-b / (2 * a)) > 28 or abs(-b / (2 * a)) < 5:
        return random_c()

    return a, b, c


def make_parabola(a, b, c, xes, number):
    clear_data()
    plt.gcf().clear()
    cool = True
    if abs(round(-b / (2 * a), 2) - number) > 0.7:
        cool = False
    x = np.linspace(-30, 30, 1000)
    y = a * (x ** 2) + b * x + c

    x1 = np.array(xes)
    y1 = a * x1 ** 2 + b * x1 + c

    x0 = np.array(round(-b / (2 * a), 2))
    y0 = a * (x0 ** 2) + b * x0 + c

    final_x = np.array([number])
    final_y = a * (final_x ** 2) + b * final_x + c

    plt.rc('font', size=13)

    plt.scatter(x1, y1, color='red', label='–î–∞–Ω–Ω—ã–µ')
    plt.scatter(x0, y0, color='green', label='–í–µ—Ä—à–∏–Ω–∞')
    plt.scatter(final_x, final_y, color='purple', label='–ò—Ç–æ–≥')

    plt.plot(x, y)
    plt.legend()
    plt.grid(True)

    # temp_x = np.array(xes + [round(-b / (2 * a), 2)])
    # plt.xlim(-min(temp_x) - 3, max(temp_x) + 3)
    # plt.title('–°–∏—Å—Ç–µ–º–∞')
    # file = randint(1000, 10000000)
    # plt.savefig(f"feedback/static/graphics/{file}.jpg")

    plt.xlim(-33, 33)
    plt.title('–ü–æ–ª–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫')
    filee = randint(1000, 10000000)
    plt.savefig(f"static/graphics/{filee}.jpg")
    plt.gcf().clear()

    plt.rc('font', size=13)

    plt.scatter(x0, y0, color='green', label='–í–µ—Ä—à–∏–Ω–∞')
    plt.scatter(final_x, final_y, color='purple', label='–í–∞—à –æ—Ç–≤–µ—Ç')
    plt.axvline(x0, color='green')
    plt.axvline(final_x, color='purple')
    plt.plot(x, y)
    plt.legend()
    plt.grid(True)
    plt.xlim(x0 - 2, x0 + 2)
    plt.title('–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è')
    file = randint(1000, 10000000)

    plt.axvline(x=x0 - 0.7, color='r', label='–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è')
    plt.axvline(x=x0 + 0.7, color='r')
    plt.legend()

    plt.savefig(f"static/graphics/{file}.jpg")

    return x0, round(abs(number - x0), 2), file, filee, cool


def get_fb(request: HttpRequest, system):
    # from django.http import HttpResponseRedirect
    # if not request.COOKIES.get('good'):
    #     return HttpResponseRedirect('/sorry')
    if request.method == 'POST':
        table_data = request.POST.get('table_data')
        a = float(request.POST.get('a').replace(',', '.'))
        b = float(request.POST.get('b').replace(',', '.'))
        c = float(request.POST.get('c').replace(',', '.'))
        number = float(request.POST.get('number').replace(',', '.'))
        if table_data:
            x, y = get_table_data(table_data)
            x0, delta, file, filee, cool = make_parabola(a, b, c, x, number)
            data = {'x0': x0, 'file': f'/static/graphics/{file}.jpg',
                    'filee': f'/static/graphics/{filee}.jpg',
                    'cool': cool,
                    'lens': len(x),
                    'delta': delta,
                    'x': x, 'y': y}

            return render(request, 'lab/feedback/result.html', context=data)
    abc = random_c()

    inout = {
        'gradient': ['—Ç–æ—á–∫–∞', '–ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è –≤ —Ç–æ—á–∫–µ'],
        'ternary_search': ['—Ç–æ—á–∫–∞', '–ó–Ω–∞—á–µ–Ω–∏–µ'],
        'simple': ['—Ç–æ—á–∫–∞', '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –º–∏–Ω–∏–º—É–º–∞']
    }
    text = {'gradient': 'ü¶Ñ –° –ø–æ–º–æ—â—å—é –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π –≤–∞–º –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –º–∏–Ω–∏–º—É–º —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ —Å–ø—É—Å–∫–∞',
            'ternary_search': 'üîé –ê–ª–≥–æ—Ä–∏—Ç–º—ã –¥–æ–±—Ä–∞–ª–∏—Å—å –¥–∞–∂–µ —Å—é–¥–∞. –ó–¥–µ—Å—å, –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É—è—Å—å –ø–æ –∑–Ω–∞—á–µ–Ω—è–º —Ñ—É–Ω–∫—Ü–∏–∏ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –µ–µ –º–∏–Ω–∏–º—É–º',
            'simple': 'üìä –ß–µ—Ä–µ–∑ –ø–µ—Ä–µ–±–æ—Ä –∑–Ω–∞—á–µ–Ω–∏–π –Ω—É–∂–Ω–æ –ø–æ–¥–æ–±—Ä–∞—Ç—å—Å—è –∫ –º–∏–Ω–∏–º—É–º—É –∫–∞–∫ –º–æ–∂–Ω–æ –±–ª–∏–∂–µ'}

    data = {'system': system,
            'abc': abc,
            'inout': inout[system],
            'text': text[system],
            'action': f'/feedback/{system}/'
            }
    return render(request, f'lab/feedback/feedback.html', context=data)


def feedback(request):
    # from django.http import HttpResponseRedirect
    # if not request.COOKIES.get('good'):
    #     return HttpResponseRedirect('/sorry')
    return render(request, 'lab/feedback/feedbacks.html')


def graphic(v, t, e, b, w, last_t):
    clear_data()
    plt.gcf().clear()
    # create 1000 equally spaced points between -10 and 10
    x = np.linspace(0, max(last_t, 8), 1000)
    x1 = np.array(last_t)
    y1 = v + 2.7 ** (-b * x1) * np.cos(w * x1)
    # calculate the y value for each element of the x vector
    y = v + 2.7 ** (-b * x) * np.cos(w * x)
    fig, ax = plt.subplots()
    ax.plot(x, y)
    ax.scatter(x1, y1, color='purple', label='–ù–∞–π–¥–µ–Ω–Ω–æ–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è')
    ax.axhline(y=v - e, color='red', linestyle='--', linewidth=2, label='–î–æ–ø—É—Å—Ç–∏–º–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ')
    ax.axhline(y=v + e, color='red', linestyle='--', linewidth=2)

    # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è –Ω–∞ —É—Ä–æ–≤–Ω–µ x=3
    ax.axvline(x=t, color='green', linestyle=':', linewidth=2, label='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è')
    ax.legend()
    filee = randint(1000, 10000000)
    plt.savefig(f"static/graphics/{filee}.jpg")
    return filee


def regulation(request):
    # from django.http import HttpResponseRedirect
    # if not request.COOKIES.get('good'):
    #     return HttpResponseRedirect('/sorry')
    return render(request, 'lab/regulation/regulations.html')


def pid(request):
    # from django.http import HttpResponseRedirect
    # if not request.COOKIES.get('good'):
    #     return HttpResponseRedirect('/sorry')
    if request.method == 'POST':
        con = {'v': float(request.POST['v'].replace(',', '.')),
               'b': float(request.POST['b'].replace(',', '.')),
               'w': float(request.POST['w'].replace(',', '.')),
               't': float(request.POST['t'].replace(',', '.')),
               'e': float(request.POST['e'].replace(',', '.'))}

        table_data = request.POST.get('table_data')

        table_data = [i.split(',')[1:] for i in table_data[1:-1].split('\\n')]
        con['table'] = table_data
        con['tryes'] = len(con['table'][0])

        arr = [i[-1].replace(',', '.') for i in table_data[1:]]

        if arr[-1] == '–°–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ':
            arr[-1] = '8'
        arr = [float(i) for i in arr]

        con['arr'] = arr
        filee = graphic(con['v'], con['t'], con['e'], con['b'], con['w'], arr[-1])
        con['filee'] = f'/static/graphics/{filee}.jpg'
        return render(request, 'lab/regulation/result.html', con)

    con = {'v': round(uniform(5, 10), 2),
           't': round(uniform(1, 3.5), 2),
           'e': round(uniform(0.1, 0.5), 2),
           'b': round(uniform(0.1, 0.9), 2),
           'w': round(uniform(2, 10), 2)}

    return render(request, 'lab/regulation/regulation.html', context=con)


# Create your views here.

def control(request):
    # from django.http import HttpResponseRedirect
    # if not request.COOKIES.get('good'):
    #     return HttpResponseRedirect('/sorry')
    return render(request, 'lab/control/controls.html')


def get_control(request):
    # from django.http import HttpResponseRedirect
    # if not request.COOKIES.get('good'):
    #     return HttpResponseRedirect('/sorry')
    if request.method == 'POST':
        table_data = request.POST.get('table_data')
        table_data = [i.split(',')[1:] for i in table_data[1:-1].split('\\n')]
        con = {'fio': request.POST.get('text'), 'table': table_data}
        mx = 0
        fio = request.POST.get('text')
        fio = fio.split()
        if len(fio) <= 1:
            return HttpResponse('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û')
        try:
            fio = fio[1][0] + '. ' + fio[2][0] + '. ' + fio[0]
        except IndexError:
            fio = fio[1][0] + '. ' + fio[0]
        for i in range(5):
            if int(table_data[5][i]) >= mx:
                con['tr'] = table_data[0][i]
                con['x1'] = int(table_data[1][i])
                con['x2'] = int(table_data[2][i])
                con['sv'] = int(table_data[3][i])
                con['fuel'] = int(table_data[4][i])
                con['mx'] = int(table_data[5][i])

                mx = con['mx']
        d = randint(1, 10000)
        text = f'''–¥–æ–∫—É–º–µ–Ω—Ç(–ì–û–°–¢-7-32-2017)
        --

        —Ç–∏—Ç—É–ª—å–Ω—ã–π-–ª–∏—Å—Ç()
        –≤—ã—à–µ—Å—Ç–æ—è—â–∞—è - –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –≤—ã—Å—à–µ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏
        –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è - –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —è–¥–µ—Ä–Ω—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç "–ú–ò–§–ò"
        —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ - –ù–ò–Ø–£ –ú–ò–§–ò

        –≤–∏–¥-–¥–æ–∫—É–º–µ–Ω—Ç–∞ - –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞ ‚Ññ22
        —Ç–µ–º–∞ - –ò–∑—É—á–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –∫–∏–±–µ—Ä–Ω–µ—Ç–∏–∫–µ
        —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å - –°—Ç–∞—Ä—à–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∫–∞—Ñ–µ–¥—Ä—ã 22 ¬´–ö–∏–±–µ—Ä–Ω–µ—Ç–∏–∫–∞¬ª –ù–ò–Ø–£ –ú–ò–§–ò
        —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å-—Ñ–∏–æ - –†.–í. –î—É—à–∫–∏–Ω
        —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å-—Ç–µ–º—ã - –°—Ç—É–¥–µ–Ω—Ç –≥—Ä—É–ø–ø—ã –ë24-507
        —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å-—Ç–µ–º—ã-—Ñ–∏–æ - {fio}
        –≥–æ—Ä–æ–¥ - –ú–æ—Å–∫–≤–∞
        –≥–æ–¥ - 2024
        --

        —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ()


        + –í–≤–µ–¥–µ–Ω–∏–µ
        ++ –¶–µ–ª—å —Ä–∞–±–æ—Ç—ã
        –ò–∑—É—á–∏—Ç—å –ø–æ–Ω—è—Ç–∏–µ "—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è" –≤ –∫–∏–±–µ—Ä–Ω–µ—Ç–∏–∫–µ –∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –∫–æ—Å–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ—Ä–∞–±–ª—è.
        ++ –ó–∞–¥–∞—á–∏
        )) –ò–∑—É—á–∏—Ç—å –ø–æ–Ω—è—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤ —Ö–æ–¥–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã.
        )) –ù–∞–π—Ç–∏ –Ω–∞–∏–ª—É—á—à–∏–µ —Ç–æ—á–∫–∏ X1 –∏ –•2 –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ–ª–µ—Ç–∞ –∫–æ—Ä–∞–±–ª—è.

        + –û—Å–Ω–æ–≤–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
        ++ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
        */–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ/* ‚Äî  —ç—Ç–æ —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç—å –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ —Å—Ñ–µ—Ä–µ –∫–∏–±–µ—Ä–Ω–µ—Ç–∏–∫–∏.
        —Ä–∏—Å—É–Ω–æ–∫(—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, 15) –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ


        + –•–æ–¥ —Ä–∞–±–æ—Ç—ã
        ++ –í—ã–±–æ—Ä –∏–∑—É—á–∞–µ–º–æ–π —Å–∏—Å—Ç–µ–º—ã
        –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞.

        —Ä–∏—Å—É–Ω–æ–∫(–°–∫—Ä–∏–Ω) –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π
        —Ä–∏—Å—É–Ω–æ–∫(–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, 18) –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã

        ++ –í–≤–æ–¥ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        –í –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω –≤–≤–æ–¥ –¥–≤—É—Ö –∑–Ω–∞—á–µ–Ω–∏–π. –í—Ö–æ–¥–Ω–æ–≥–æ –∏ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–æ—Ä–∞–±–ª—è. –ó–∞–¥–∞—á–µ–π –±—ã–ª–æ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞–∏–º–µ–Ω—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ø–ª–∏–≤–∞ –∏ –ø–æ—Å–µ—Ç–∏—Ç—å –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–Ω–∏—Ö –∑–æ–Ω.



        —Ä–∏—Å—É–Ω–æ–∫(–∏–∑–º–µ—Ä–µ–Ω–∏—è, 18) –¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è –ø–æ–ª–µ—Ç–∞

        ++  –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        –ù–∞–∏–ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª–µ—Ç–∞, –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è 5 –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫, —Å–æ—Å—Ç–∞–≤–∏–ª {con['mx']} –æ—á–∫–æ–≤. –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞ - {con['x1']} {con['x2']} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ. –í –∏—Ç–æ–≥–µ –±—ã–ª–æ –ø–æ—Å–µ—â–µ–Ω–æ {con['sv']} –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ç–∞–Ω—Ü–∏–π, –∞ –∑–∞–ø–∞—Å —Ç–æ–ø–ª–∏–≤–∞ –ø–æ—Å–ª–µ –ø–æ–ª–µ—Ç–∞ —Å–æ—Å—Ç–∞–≤–∏–ª {con['fuel']} –µ–¥–∏–Ω–∏—Ü.


        —Ä–∏—Å—É–Ω–æ–∫(—Ä–µ–∑—É–ª—å—Ç–∞—Ç, 18) –ò—Ç–æ–≥ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã

        + –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
        –í—ã–≤–æ–¥: –≤ —Ö–æ–¥–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±—ã–ª–æ –∏–∑—É—á–µ–Ω–æ –ø–æ–Ω—è—Ç–∏–µ "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ" –≤ –æ–±–ª–∞—Å—Ç–∏ –∫–∏–±–µ—Ä–Ω–µ—Ç–∏–∫–∏. –ü–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è 5 –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞–∏–ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Å—Ç–∞–≤–∏–ª {con['mx']} –æ—á–∫–æ–≤.'''

        with open(f'static/works/{d}.txt', "w") as f:
            f.write(text)
            f.close()
        con['tx'] = text
        return render(request, 'lab/control/result.html', context=con)

    return render(request, 'lab/control/control.html')


def lab_index(request):
    # if not request.COOKIES.get('good'):
    #     return HttpResponseRedirect('/sorry')
    return render(request, 'lab/index.html')
